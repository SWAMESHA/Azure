{
	"name": "dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CustomerDeatils",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AllTables",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "AllTables",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage2",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "join1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Age as integer,",
				"          IsActive as boolean,",
				"          {LocationID } as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          CustomerID as integer,",
				"          Month as string,",
				"          PurchaseAmount as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source(output(",
				"          LocationID as integer,",
				"          Region as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source3",
				"source1 derive({FullName } = concat(FirstName, ' ', LastName)) ~> derivedColumn1",
				"source2 aggregate(groupBy(CustomerID),",
				"     { TotalSpend} = sum(PurchaseAmount)) ~> aggregate1",
				"derivedColumn1 filter(equals(IsActive,true()) && greaterOrEqual(Age,18)) ~> filter1",
				"aggregate1 derive({ CustomerSegment} = iif({ TotalSpend}> 5000, 'High Spender', iif({ TotalSpend} >= 1000, 'Medium Spender', 'Low Spender'))) ~> derivedColumn2",
				"filter1, source3 lookup({LocationID } == LocationID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1, derivedColumn2 join(source1@CustomerID == aggregate1@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sort(asc({FullName }, true)) ~> sort1",
				"select1 keyGenerate(output(CustomerKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"sort1 select(mapColumn(",
				"          CustomerID = source1@CustomerID,",
				"          Age,",
				"          IsActive,",
				"          {LocationID },",
				"          {FullName },",
				"          LocationID,",
				"          Region,",
				"          CustomerID = aggregate1@CustomerID,",
				"          { TotalSpend},",
				"          { CustomerSegment},",
				"          First_Name = FirstName,",
				"          LastName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'swamesha',",
				"     folderPath: ' adls-container/final_output',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     partitionFileNames:['customer'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}